{"version":3,"sources":["components/Square.js","components/Board.js","components/App.js","serviceWorker.js","index.js"],"names":["COLORS","X","O","Square","value","onClick","combinedStyles","classNames","square","blue","orange","className","Board","props","getSquareIndex","r","c","renderBoard","output","currentRow","sIndex","currentSquare","state","squares","handleClick","push","cIndex","winner","rIndex","columns","slice","player","xIsNext","checkIfPlayerWin","setState","window","alert","hasHorizontalWin","hasVerticallWin","hashDiagonalWin","hasAntiDiaWin","isInBound","hasWinOnLine","rDelta1","cDelta1","rDelta2","cDelta2","counter","r1","c1","r2","c2","sIndex1","sIndex2","Array","ROW_LEN","fill","this","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6f980337.chunk.js","sourcesContent":["/**\n * About: a square on the board\n */\n\n// Note: need to import React, even though it is not directly used below\nimport React from \"react\";\nimport classNames from \"classnames\";\n\nconst COLORS = {\n  X: \"blue\",\n  O: \"orange\",\n};\n\nconst Square = ({ value, onClick }) => {\n  const combinedStyles = classNames({\n    square: true,\n    blue: COLORS[value] === \"blue\",\n    orange: COLORS[value] === \"orange\",\n  });\n  return (\n    <td className={combinedStyles} onClick={onClick}>\n      {value}\n    </td>\n  );\n};\n\nexport default Square;\n","/**\n * About: the main component of this game/app\n */\n\nimport React from \"react\";\nimport Square from \"./Square\";\n\n// About: the default board is one with 6 rows and 7 columns\n// Note: the sizes for rows and columns can be easily customized for bigger boards\nconst ROW_LEN = 15;\nconst COL_LEN = 20;\n\nconst TOTAL_INDICES = ROW_LEN * COL_LEN;\nconst NUMBER_TO_CONNECT = 4;\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(TOTAL_INDICES).fill(null),\n      xIsNext: true, // Player X plays first\n      columns: Array(COL_LEN).fill(ROW_LEN - 1), // The first available row # in each column\n      winner: null, // One of the 2 players\n    };\n  }\n\n  /**\n   * Below are the methods (and helper functions)\n   */\n\n  // About: helper function, to derive square's index per row index and col index\n  getSquareIndex = (r, c) => r * COL_LEN + c;\n\n  // About: render a board, with r rows and c cols\n  renderBoard = () => {\n    // console.log(`### Rendering the board!`)\n    const output = [];\n\n    for (let r = 0; r < ROW_LEN; r++) {\n      const currentRow = [];\n      for (let c = 0; c < COL_LEN; c++) {\n        const sIndex = this.getSquareIndex(r, c);\n        const currentSquare = (\n          // Note:'sIndex' is passed as a closure variable\n          <Square\n            value={this.state.squares[sIndex]}\n            onClick={() => this.handleClick(c)} // 'c' for column's index\n          />\n        );\n        currentRow.push(currentSquare);\n      }\n      output.push(<tr>{currentRow}</tr>);\n    }\n\n    return output;\n  };\n\n  // About: handle a player's click on the board\n  // Parameters: square index, column index\n  handleClick = (cIndex) => {\n    // Step: check if there is already a winner\n    if (this.state.winner !== null) {\n      window.alert(`Game over! Winner is ${this.state.winner}.`);\n      return;\n    }\n\n    // Step; check if current column is full\n    const rIndex = this.state.columns[cIndex]; // The first available row's index\n    if (rIndex < 0) return;\n    // Else (column is available): then determine the square index to update\n    const sIndex = this.getSquareIndex(rIndex, cIndex);\n\n    // Step: make a copy of the current states\n    const squares = this.state.squares.slice();\n    const columns = this.state.columns.slice();\n\n    // Step: update the copies of states\n    const player = this.state.xIsNext ? \"X\" : \"O\"; // Determine the current player\n    squares[sIndex] = player;\n    columns[cIndex] -= 1; // Move the avaiable spot per column up by 1 row\n\n    // Step: check if current player just won\n    let winner = null;\n    if (this.checkIfPlayerWin(rIndex, cIndex, player, squares)) {\n      winner = player;\n    }\n\n    // Step: update the states\n    this.setState({\n      squares: squares,\n      xIsNext: !this.state.xIsNext,\n      columns: columns,\n      winner: winner,\n    });\n  };\n\n  // About: check if there is a winner, after each turn\n  // Input: row and col indices, of the most recent ball\n  checkIfPlayerWin = (r, c, player, squares) => {\n    // If this player wins on any of the 4 lines\n    if (this.hasHorizontalWin(r, c, player, squares)) return true;\n    if (this.hasVerticallWin(r, c, player, squares)) return true;\n    if (this.hashDiagonalWin(r, c, player, squares)) return true;\n    if (this.hasAntiDiaWin(r, c, player, squares)) return true;\n\n    return false; // ELse this player has not won (yet)\n  };\n\n  // About: helper function; if a pair of indices are within the bound of the board\n  isInBound = (r, c) => {\n    if (r < 0) return false;\n    if (r >= ROW_LEN) return false;\n    if (c < 0) return false;\n    if (c >= COL_LEN) return false;\n    return true;\n  };\n\n  // About: helper function, for all 4 lines' winner check\n  hasWinOnLine = (\n    r,\n    c,\n    player,\n    squares,\n    rDelta1,\n    cDelta1,\n    rDelta2,\n    cDelta2\n  ) => {\n    let counter = 1;\n    // For square 1\n    let r1 = r + rDelta1,\n      c1 = c + cDelta1;\n    // For square 2\n    let r2 = r + rDelta2,\n      c2 = c + cDelta2;\n\n    while (this.isInBound(r1, c1) || this.isInBound(r2, c2)) {\n      if (this.isInBound(r1, c1)) {\n        const sIndex1 = this.getSquareIndex(r1, c1);\n        if (squares[sIndex1] && squares[sIndex1] === player) {\n          counter++;\n          r1 = r1 + rDelta1;\n          c1 = c1 + cDelta1;\n        } else {\n          r1 = -1;\n        }\n      }\n      if (this.isInBound(r2, c2)) {\n        const sIndex2 = this.getSquareIndex(r2, c2);\n        if (squares[sIndex2] && squares[sIndex2] === player) {\n          counter++;\n          r2 = r2 + rDelta2;\n          c2 = c2 + cDelta2;\n        } else {\n          r2 = -1;\n        }\n      }\n      if (counter === NUMBER_TO_CONNECT) return true;\n    }\n\n    return false;\n  };\n\n  // About: helper function, for calculateWinner()\n  hasHorizontalWin = (r, c, player, squares) =>\n    this.hasWinOnLine(r, c, player, squares, 0, -1, 0, 1);\n\n  // About: helper function, for calculateWinner()\n  hasVerticallWin = (r, c, player, squares) =>\n    this.hasWinOnLine(r, c, player, squares, -1, 0, 1, 0);\n\n  // About: helper function, for calculateWinner()\n  hashDiagonalWin = (r, c, player, squares) =>\n    this.hasWinOnLine(r, c, player, squares, 1, 1, -1, -1);\n\n  hasAntiDiaWin = (r, c, player, squares) =>\n    this.hasWinOnLine(r, c, player, squares, 1, -1, -1, 1);\n\n  render() {\n    return (\n      <div>\n        <p>Winner: {this.state.winner}</p>\n        <table className=\"board\">{this.renderBoard()}</table>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n\n// Note: somehow, Instant app's more concise version of 'state' does not work here (maybe\n// it is due to some webpack config)\n// state = {\n//   squares: Array(TOTAL_INDICES).fill(null),\n//   xIsNext: true, // Player X plays first\n// };\n","import React from \"react\";\nimport \"../App.css\";\nimport Board from \"./Board\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">Connect Four Game</header>\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}