{"version":3,"sources":["components/Square.js","components/Board.js","components/App.js","serviceWorker.js","index.js"],"names":["COLORS","X","O","Square","value","onClick","combinedStyles","classNames","square","blue","orange","className","Board","props","initGame","state","rowLen","colLen","adjustedRowLen","adjustedColLen","setState","totalIndices","squares","Array","fill","columns","xIsNext","winner","getSquareIndex","r","c","renderBoard","output","currentRow","sIndex","currentSquare","handleClickOnBoard","push","cIndex","rIndex","slice","player","checkIfPlayerWin","window","alert","hasHorizontalWin","hasVerticallWin","hashDiagonalWin","hasAntiDiaWin","isInBound","hasWinOnLine","rDelta1","cDelta1","rDelta2","cDelta2","counter","r1","c1","r2","c2","sIndex1","sIndex2","updateRowSize","event","Number","parseInt","target","updateColSize","handleSubmit","preventDefault","this","name","placeholder","onChange","type","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.284ceddf.chunk.js","sourcesContent":["/**\n * About: a square on the board\n */\n\n// Note: need to import React, even though it is not directly used below\nimport React from \"react\";\nimport classNames from \"classnames\";\n\nconst COLORS = {\n  X: \"blue\",\n  O: \"orange\",\n};\n\nconst Square = ({ value, onClick }) => {\n  const combinedStyles = classNames({\n    square: true,\n    blue: COLORS[value] === \"blue\",\n    orange: COLORS[value] === \"orange\",\n  });\n  return (\n    <td className={combinedStyles} onClick={onClick}>\n      {value}\n    </td>\n  );\n};\n\nexport default Square;\n","/**\n * About: the main component of this game/app\n */\n\nimport React from \"react\";\nimport Square from \"./Square\";\n\n// About: the default board is one with 6 rows and 7 columns\nconst ROW_LEN = 6;\nconst COL_LEN = 7;\n\nconst NUMBER_TO_CONNECT = 4;\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rowLen: ROW_LEN,\n      colLen: COL_LEN,\n      totalIndices: 0,\n      squares: [], // 1D representation of the board\n      columns: [], // The first available row # in each column\n      xIsNext: true, // Player X plays first\n      winner: null, // One of the 2 players\n      adjustedRowLen: ROW_LEN,\n      adjustedColLen: COL_LEN,\n    };\n  }\n\n  componentDidMount() {\n    //console.log(`[component Did Mount]`);\n    this.initGame();\n  }\n\n  // About: initialize a game, based on row len and col len\n  initGame = () => {\n    //console.log(`[initGame]`);\n    let { rowLen, colLen, adjustedRowLen, adjustedColLen } = this.state;\n\n    // Adjust rowLen and colLen, if needed\n    if (rowLen !== adjustedRowLen) rowLen = adjustedRowLen;\n    if (colLen !== adjustedColLen) colLen = adjustedColLen;\n\n    // Update/initialize the states\n    this.setState({\n      rowLen,\n      colLen,\n      totalIndices: rowLen * colLen,\n      squares: new Array(rowLen * colLen).fill(null),\n      columns: new Array(colLen).fill(rowLen - 1),\n      xIsNext: true,\n      winner: null,\n    });\n  };\n\n  /**\n   * Below are the methods (and helper functions)\n   */\n\n  // About: helper function, to derive square's index per row index and col index\n  getSquareIndex = (r, c) => r * this.state.colLen + c;\n\n  // About: render a board, with r rows and c cols\n  // Note: board refreshes when any of the 3 states changes\n  renderBoard = () => {\n    const { squares, rowLen, colLen } = this.state;\n    const output = [];\n\n    for (let r = 0; r < rowLen; r++) {\n      const currentRow = [];\n      for (let c = 0; c < colLen; c++) {\n        const sIndex = this.getSquareIndex(r, c);\n        const currentSquare = (\n          // Note:'sIndex' is passed as a closure variable\n          <Square\n            value={squares[sIndex]}\n            onClick={() => this.handleClickOnBoard(c)} // 'c' for column's index\n          />\n        );\n        currentRow.push(currentSquare);\n      }\n      output.push(<tr>{currentRow}</tr>);\n    }\n\n    return output;\n  };\n\n  // About: handle a player's click on the board\n  // Parameters: square index, column index\n  handleClickOnBoard = (cIndex) => {\n    //console.log(`###### Handling click on board; cIndex: ${cIndex}`);\n\n    // Step 1: check if there is already a winner\n    if (this.state.winner !== null) {\n      window.alert(`Game over! Winner is ${this.state.winner}.`);\n      return;\n    }\n\n    // Step 2: check if current column is full\n    const rIndex = this.state.columns[cIndex]; // The first available row's index\n    if (rIndex < 0) return;\n    // Else (column is available): then determine the square index to update\n    const sIndex = this.getSquareIndex(rIndex, cIndex);\n\n    // Step 3: make a copy of the current states\n    const squares = this.state.squares.slice();\n    const columns = this.state.columns.slice();\n\n    // Step 4: update the copies of states\n    const player = this.state.xIsNext ? \"X\" : \"O\"; // Determine the current player\n    squares[sIndex] = player;\n    columns[cIndex] -= 1; // Move the avaiable spot per column up by 1 row\n\n    // Step 5: check if current player just won\n    let winner = null;\n    if (this.checkIfPlayerWin(rIndex, cIndex, player, squares)) {\n      winner = player;\n    }\n\n    // Step 6: update the states\n    this.setState({\n      squares: squares,\n      xIsNext: !this.state.xIsNext,\n      columns: columns,\n      winner: winner,\n    });\n  };\n\n  // About: check if there is a winner, after each turn\n  // Input: row and col indices, of the most recent ball\n  checkIfPlayerWin = (r, c, player, squares) => {\n    // If this player wins on any of the 4 lines\n    if (this.hasHorizontalWin(r, c, player, squares)) return true;\n    if (this.hasVerticallWin(r, c, player, squares)) return true;\n    if (this.hashDiagonalWin(r, c, player, squares)) return true;\n    if (this.hasAntiDiaWin(r, c, player, squares)) return true;\n\n    return false; // ELse this player has not won (yet)\n  };\n\n  // About: helper function; if a pair of indices are within the bound of the board\n  isInBound = (r, c) => {\n    const { rowLen, colLen } = this.state;\n    if (r < 0) return false;\n    if (r >= rowLen) return false;\n    if (c < 0) return false;\n    if (c >= colLen) return false;\n    return true;\n  };\n\n  // About: helper function, for all 4 lines' winner check\n  hasWinOnLine = (\n    r,\n    c,\n    player,\n    squares,\n    rDelta1,\n    cDelta1,\n    rDelta2,\n    cDelta2\n  ) => {\n    let counter = 1;\n    // For square 1\n    let r1 = r + rDelta1,\n      c1 = c + cDelta1;\n    // For square 2\n    let r2 = r + rDelta2,\n      c2 = c + cDelta2;\n\n    while (this.isInBound(r1, c1) || this.isInBound(r2, c2)) {\n      if (this.isInBound(r1, c1)) {\n        const sIndex1 = this.getSquareIndex(r1, c1);\n        if (squares[sIndex1] && squares[sIndex1] === player) {\n          counter++;\n          r1 = r1 + rDelta1;\n          c1 = c1 + cDelta1;\n        } else {\n          r1 = -1;\n        }\n      }\n      if (this.isInBound(r2, c2)) {\n        const sIndex2 = this.getSquareIndex(r2, c2);\n        if (squares[sIndex2] && squares[sIndex2] === player) {\n          counter++;\n          r2 = r2 + rDelta2;\n          c2 = c2 + cDelta2;\n        } else {\n          r2 = -1;\n        }\n      }\n      if (counter === NUMBER_TO_CONNECT) return true;\n    }\n\n    return false;\n  };\n\n  // About: helper function, for calculateWinner()\n  hasHorizontalWin = (r, c, player, squares) =>\n    this.hasWinOnLine(r, c, player, squares, 0, -1, 0, 1);\n\n  // About: helper function, for calculateWinner()\n  hasVerticallWin = (r, c, player, squares) =>\n    this.hasWinOnLine(r, c, player, squares, -1, 0, 1, 0);\n\n  // About: helper function, for calculateWinner()\n  hashDiagonalWin = (r, c, player, squares) =>\n    this.hasWinOnLine(r, c, player, squares, 1, 1, -1, -1);\n\n  hasAntiDiaWin = (r, c, player, squares) =>\n    this.hasWinOnLine(r, c, player, squares, 1, -1, -1, 1);\n\n  /**\n   * Below are the methods related to adjusting board size\n   */\n\n  updateRowSize = (event) => {\n    //console.log(`[updateRowSize]`);\n    this.setState({ adjustedRowLen: Number.parseInt(event.target.value) });\n  };\n\n  updateColSize = (event) =>\n    this.setState({ adjustedColLen: Number.parseInt(event.target.value) });\n\n  handleSubmit = (event) => {\n    this.initGame();\n    event.preventDefault();\n  };\n\n  render() {\n    // debugger;\n    //console.log(`[render]`);\n    return (\n      <div>\n        <h2>Winner: {this.state.winner}</h2>\n        <table className=\"board\">{this.renderBoard()}</table>\n        <div className=\"adjust-size\">\n          <p>Adjust board size and start a new game (default is 6 by 7): </p>\n          <form>\n            <input\n              name=\"rows\"\n              placeholder=\"Rows\"\n              onChange={this.updateRowSize}\n            ></input>\n            <input\n              name=\"cols\"\n              placeholder=\"Columns\"\n              onChange={this.updateColSize}\n            ></input>\n            <input\n              type=\"submit\"\n              value=\"Submit\"\n              onClick={this.handleSubmit}\n            ></input>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React from \"react\";\nimport \"../App.css\";\nimport Board from \"./Board\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">Connect Four Game</header>\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}